import os

from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, User, BotCommand
from aiogram_dialog import Dialog, DialogManager, StartMode, Window, setup_dialogs
from aiogram_dialog.widgets.text import Const, Format, Multi
from aiogram_dialog.widgets.kbd import Button, Select, Group
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput

from dotenv import load_dotenv

from tools.tools import index_check, weight_check, size_check
from handlers.handlers import (go_start, correct_departure_index_handler, correct_destination_index_handler,
                               correct_weght_handler, error_value_handler, start_cost_calculate_handler,
                               start_tracking_handler, calculate_cost, correct_height_handler, 
                               correct_length_handler, correct_width_handler, box_size_selection,
                               manual_size_selection, error_address_handler)
from states.states import StartSG, ParcelCostDialogSG, TrackingDialogSG


load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

router = Router()


async def set_commands_menu(bot: Bot):
    await bot.delete_my_commands()
    main_menu_commands = [BotCommand(
                            command='/start',
                            description='–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞')
                        ]
    await bot.set_my_commands(main_menu_commands)
    return None


async def username_getter(dialog_manager: DialogManager, event_from_user: User, **kwargs):
    return {'username': event_from_user.username}


async def calculation_result_getter(dialog_manager: DialogManager, **kwargs):
    calculation_result = dialog_manager.dialog_data.get('calculation_result')
    return {'calculation_result': calculation_result}


async def get_box_sizes(**kwargs):
    sizes = [
        ('S', 10),
        ('M', 20),
        ('L', 30),
        ('XL', 40),
        # ('–ù–µ–≥–∞–±–∞—Ä–∏—Ç', 5),
    ]
    return {'sizes': sizes}


# –≠—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
start_dialog = Dialog(
    Window(
        Multi(
            Format('–ü—Ä–∏–≤–µ—Ç, {username}!'),
            Const('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞'),
            Const('–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º '
                  '–∏–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É'),
            sep='\n'
        ),

        Button(
            text=Const('üí≥ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏'),
            id='button_cost_calculation_mode',
            on_click=start_cost_calculate_handler),

        Button(
            text=Const('üöõ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'),
            id='button_tracking_mode',
            on_click=start_tracking_handler,),

        getter=username_getter,
        state=StartSG.start
    ),
)


cost_calculation_dialog = Dialog(
    Window(
        Const(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ—Ä–æ–±–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏'),
        Group(
            Select(
                Format('{item[0]}'),
                id='box_size',
                item_id_getter=lambda x: x[1],
                items='sizes',
                on_click=box_size_selection
            ),
            width=4,
        ),
        Button(Const('üìê –í–≤–µ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä—ã –≤—Ä—É—á–Ω—É—é'), id='manual_size', on_click=manual_size_selection),
        getter=get_box_sizes,
        state=ParcelCostDialogSG.select_box_size,
    ),
    Window(
        Const(text='–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ—Å—ã–ª–∫–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö'),
        TextInput(
            id='width_input',
            type_factory=size_check,
            on_success=correct_width_handler,
            on_error=error_value_handler,
        ),
        Button(Const('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='button_start', on_click=go_start),
        state=ParcelCostDialogSG.width,
    ),
    Window(
        Const(text='–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø–æ—Å—ã–ª–∫–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö'),
        TextInput(
            id='height_input',
            type_factory=size_check,
            on_success=correct_height_handler,
            on_error=error_value_handler,
        ),
        Button(Const('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='button_start', on_click=go_start),
        state=ParcelCostDialogSG.height,
    ),
    Window(
        Const(text='–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–æ—Å—ã–ª–∫–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö'),
        TextInput(
            id='length_input',
            type_factory=size_check,
            on_success=correct_length_handler,
            on_error=error_value_handler,
        ),
        Button(Const('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='button_start', on_click=go_start),
        state=ParcelCostDialogSG.length,
    ),
    Window(
        Const(text='–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä–∞–º–º–∞—Ö'),
        TextInput(
            id='weight_input',
            type_factory=weight_check,
            on_success=correct_weght_handler,
            on_error=error_value_handler,
        ),
        Button(Const('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='button_start', on_click=go_start),
        state=ParcelCostDialogSG.weight,
    ),
    Window(
        Const(text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n(–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞)'),
        TextInput(
            id='index_departure_input',
            type_factory=index_check,
            on_success=correct_departure_index_handler,
            on_error=error_address_handler,
        ),
        Button(Const('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='button_start', on_click=go_start),
        state=ParcelCostDialogSG.departure_index
    ),
    Window(
        Const(text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n(–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞)'),
        TextInput(
            id='index_destiantion_input',
            type_factory=index_check,
            on_success=correct_destination_index_handler,
            on_error=error_address_handler,
        ),
        Button(Const('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='button_start', on_click=go_start),
        state=ParcelCostDialogSG.destination_index
    ),
    Window(
        Const(text='–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã. –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞—Å—Å—á–µ—Ç?'),
        Button(Const('üí≥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å'), id='button_calculate', on_click=calculate_cost),
        Button(Const('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='button_start', on_click=go_start),
        state=ParcelCostDialogSG.calculate,
    ),
    Window(
        Format('{calculation_result}'),
        Button(Const('üí≥ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç'), id='button_new_calculate', on_click=start_cost_calculate_handler),
        Button(Const('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='button_start', on_click=go_start),
        getter=calculation_result_getter,
        state=ParcelCostDialogSG.new_calculate,
    ),

)


tracking_dialog = Dialog(
    Window(
        Format('–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–∏–∞–ª–æ–≥ –ø—Ä–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏'),
        Button(Const('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='button_start', on_click=go_start),
        state=TrackingDialogSG.start
    ),
)


# –≠—Ç–æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(CommandStart())
async def command_start_process(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(state=StartSG.start, mode=StartMode.RESET_STACK)


def main():
    dp.startup.register(set_commands_menu)
    dp.include_router(router)
    dp.include_routers(start_dialog, cost_calculation_dialog, tracking_dialog)
    setup_dialogs(dp)
    dp.run_polling(bot)


if __name__ == '__main__':
    main()